#!/usr/bin/env python

import sys

import cli.app
import cli.log

from echo import client


DEFAULT_PARAMS = (
    (('--config',), {'dest': 'configfile',
                     'action': 'store',
                     'default': './etc/default.conf'}),
    (('--url',), {'dest': 'url',
                  'action': 'store',
                  'default': 'http://localhost:5000'}),
    (('--token',), {'dest': 'token', 'action': 'store'}),
    )


class BaseApp(cli.log.LoggingApp):
  def __init__(self, *args, **kw):
    kw.setdefault('name', self.__class__.__name__.lower())
    super(BaseApp, self).__init__(*args, **kw)

  def add_default_params(self):
    for args, kw in DEFAULT_PARAMS:
      self.add_param(*args, **kw)

  def _parse_keyvalues(self, args):
    kv = {}
    for x in args:
      key, value = x.split('=', 1)
      # make lists if there are multiple values
      if key.endswith('[]'):
        key = key[:-2]
        existing = kv.get(key, [])
        existing.append(value)
        kv[key] = existing
      else:
        kv[key] = value
    return kv


class LoadData(BaseApp):
  def __init__(self, *args, **kw):
    super(LoadData, self).__init__(*args, **kw)
    self.add_default_params()
    self.add_param('fixture', nargs='+')

  def main(self):
    """Given some fixtures, create the appropriate data."""
    pass


class CrudCommands(BaseApp):
  ACTION_MAP = {}

  def __init__(self, *args, **kw):
    super(CrudCommands, self).__init__(*args, **kw)
    self.add_default_params()
    self.add_param('action')
    self.add_param('keyvalues', nargs='+')

  def main(self):
    """Given some keyvalues create the appropriate data."""
    c = client.HttpClient(self.params.url, token=self.params.token)
    action_name = self.ACTION_MAP[self.params.action]
    kv = self._parse_keyvalues(self.params.keyvalues)
    resp = getattr(c, action_name)(**kv)
    print resp


class UserCommands(CrudCommands):
  ACTION_MAP = {'add': 'create_user',
                'create': 'create_user',
                }


class TenantCommands(CrudCommands):
  ACTION_MAP = {'add': 'create_tenant',
                'create': 'create_tenant',
                }


class ExtrasCommands(CrudCommands):
  ACTION_MAP = {'add': 'create_extras',
                'create': 'create_extras',
                }


class Auth(BaseApp):
  def __init__(self, *args, **kw):
    super(Auth, self).__init__(*args, **kw)
    self.add_default_params()
    self.add_param('keyvalues', nargs='+')

  def main(self):
    """Attempt to authenticate against the echo API."""
    c = client.HttpClient(self.params.url, token=self.params.token)
    kv = self._parse_keyvalues(self.params.keyvalues)
    resp = c.authenticate(**kv)
    print resp


CMDS = {'loaddata': LoadData,
        'user': UserCommands,
        'tenant': TenantCommands,
        'extras': ExtrasCommands,
        'auth': Auth,
        }


if __name__ == '__main__':
  if not len(sys.argv) > 1:
    print 'try one of:', ' '.join(CMDS.keys())
    sys.exit(1)

  cmd = sys.argv[1]
  if cmd in CMDS:
    CMDS[cmd](argv=(sys.argv[:1] + sys.argv[2:])).run()
